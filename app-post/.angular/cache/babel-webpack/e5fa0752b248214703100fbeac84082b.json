{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.isAuthenticated = false;\n      this.authSubject = new Subject();\n    }\n\n    getUserId() {\n      return this.userId;\n    }\n\n    getIsAuth() {\n      return this.isAuthenticated;\n    }\n\n    getToken() {\n      return this.token;\n    }\n\n    getAuthListener() {\n      return this.authSubject.asObservable();\n    }\n\n    signUpUser(email, password) {\n      const data = {\n        email: email,\n        password: password\n      };\n      this.http.post(\"http://localhost:3000/signup\", data).subscribe(res => {\n        console.log(res);\n      }, error => {\n        this.authSubject.next(false);\n      });\n    }\n\n    loginUser(email, password) {\n      const data = {\n        email: email,\n        password: password\n      };\n      this.http.post(\"http://localhost:3000/login\", data).subscribe(res => {\n        if (res.token) {\n          this.token = res.token;\n          const now = new Date();\n          this.timerLogout = new Date(now.getTime() + res.expireTime * 1000);\n          this.userId = res.userId;\n          this.saveAuthDataToLocalStorage(this.token, this.timerLogout, this.userId);\n          this.isAuthenticated = true;\n          this.authSubject.next(true);\n          this.router.navigate([\"/\"]);\n        }\n      }, error => {\n        this.authSubject.next(false);\n      });\n    }\n\n    logoutUser() {\n      this.isAuthenticated = false;\n      this.token = '';\n      this.authSubject.next(false);\n      clearTimeout(this.timerLogout);\n      this.clearAuthDataFromLocalStorage();\n      this.router.navigate([\"/\"]);\n      this.userId = '';\n    }\n\n    autoAuthUser() {\n      const authInfo = this.getAuthDataFromLocalStorage();\n      if (!authInfo) return;\n      const expiredDate = authInfo.expiredDate.getTime() - new Date().getTime();\n\n      if (expiredDate > 0) {\n        this.token = authInfo.token;\n        this.isAuthenticated = true;\n        this.authSubject.next(true);\n        this.setExpiredTimer(expiredDate / 1000);\n        this.userId = authInfo.userId || \"\";\n      }\n    }\n\n    setExpiredTimer(duration) {\n      console.log(duration);\n      setTimeout(() => {\n        this.logoutUser();\n      }, duration * 1000);\n    }\n\n    clearAuthDataFromLocalStorage() {\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"expiredDate\");\n      localStorage.removeItem(\"userId\");\n    }\n\n    saveAuthDataToLocalStorage(token, expiredDate, userId) {\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"expiredDate\", expiredDate.toISOString());\n      localStorage.setItem(\"userId\", userId);\n    }\n\n    getAuthDataFromLocalStorage() {\n      const token = localStorage.getItem(\"token\");\n      const expiredDate = localStorage.getItem(\"expiredDate\");\n      const userId = localStorage.getItem(\"userId\");\n\n      if (!token || !expiredDate) {\n        return;\n      }\n\n      return {\n        token,\n        expiredDate: new Date(expiredDate),\n        userId: userId\n      };\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: \"root\"\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}