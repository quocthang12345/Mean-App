{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Developer/OneDrive/Desktop/angular/app-post/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Subject, map } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PostService {\n  constructor(http) {\n    this.http = http;\n    this.posts = [];\n    this.subject = new Subject();\n  }\n\n  getPosts() {\n    this.http.get(\"http://localhost:3000/posts\").pipe(map(postData => {\n      return postData.data.map(post => {\n        return {\n          id: post._id.toString(),\n          name: post.name,\n          description: post.description,\n          content: post.content\n        };\n      });\n    })).subscribe(transformPosts => {\n      this.posts = transformPosts;\n      this.subject.next([...transformPosts]); // thông báo đến các event về một bản sao được cập nhật\n    });\n  }\n\n  getOnePost(id) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _this.http.get(`http://localhost:3000/posts/${id}`);\n    })();\n  }\n\n  getUpdatePostListener() {\n    return this.subject.asObservable();\n  }\n\n  addPost(name, description, content) {\n    const value = {\n      id: \"\",\n      name,\n      description,\n      content\n    };\n    this.http.post(\"http://localhost:3000/addPost\", value).subscribe(responseMessage => {\n      // this.posts.push(value)\n      this.getPosts();\n      this.subject.next([...this.posts]);\n    });\n  }\n\n  deletePost(id) {\n    this.http.delete(`http://localhost:3000/deletePost/${id}`).subscribe(responseMessage => {\n      const updatePost = this.posts.filter(item => item.id !== id);\n      this.posts = updatePost;\n      this.subject.next([...this.posts]);\n    });\n  }\n\n}\n\nPostService.ɵfac = function PostService_Factory(t) {\n  return new (t || PostService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nPostService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PostService,\n  factory: PostService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"sources":["C:/Users/Developer/OneDrive/Desktop/angular/app-post/src/app/posts/post.service.ts"],"names":["Subject","map","i0","i1","PostService","constructor","http","posts","subject","getPosts","get","pipe","postData","data","post","id","_id","toString","name","description","content","subscribe","transformPosts","next","getOnePost","getUpdatePostListener","asObservable","addPost","value","responseMessage","deletePost","delete","updatePost","filter","item","ɵfac","PostService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,OAAT,EAAkBC,GAAlB,QAA6B,MAA7B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,OAAL,GAAe,IAAIR,OAAJ,EAAf;AACH;;AACDS,EAAAA,QAAQ,GAAG;AACP,SAAKH,IAAL,CAAUI,GAAV,CAAc,6BAAd,EACKC,IADL,CACUV,GAAG,CAACW,QAAQ,IAAI;AACtB,aAAOA,QAAQ,CAACC,IAAT,CAAcZ,GAAd,CAAmBa,IAAD,IAAU;AAC/B,eAAO;AACHC,UAAAA,EAAE,EAAED,IAAI,CAACE,GAAL,CAASC,QAAT,EADD;AAEHC,UAAAA,IAAI,EAAEJ,IAAI,CAACI,IAFR;AAGHC,UAAAA,WAAW,EAAEL,IAAI,CAACK,WAHf;AAIHC,UAAAA,OAAO,EAAEN,IAAI,CAACM;AAJX,SAAP;AAMH,OAPM,CAAP;AAQH,KATY,CADb,EAWKC,SAXL,CAWeC,cAAc,IAAI;AAC7B,WAAKf,KAAL,GAAae,cAAb;AACA,WAAKd,OAAL,CAAae,IAAb,CAAkB,CAAC,GAAGD,cAAJ,CAAlB,EAF6B,CAEW;AAC3C,KAdD;AAeH;;AACKE,EAAAA,UAAU,CAACT,EAAD,EAAK;AAAA;;AAAA;AACjB,aAAO,KAAI,CAACT,IAAL,CAAUI,GAAV,CAAe,+BAA8BK,EAAG,EAAhD,CAAP;AADiB;AAEpB;;AACDU,EAAAA,qBAAqB,GAAG;AACpB,WAAO,KAAKjB,OAAL,CAAakB,YAAb,EAAP;AACH;;AACDC,EAAAA,OAAO,CAACT,IAAD,EAAOC,WAAP,EAAoBC,OAApB,EAA6B;AAChC,UAAMQ,KAAK,GAAG;AAAEb,MAAAA,EAAE,EAAE,EAAN;AAAUG,MAAAA,IAAV;AAAgBC,MAAAA,WAAhB;AAA6BC,MAAAA;AAA7B,KAAd;AACA,SAAKd,IAAL,CAAUQ,IAAV,CAAe,+BAAf,EAAgDc,KAAhD,EAAuDP,SAAvD,CAAiEQ,eAAe,IAAI;AAChF;AACA,WAAKpB,QAAL;AACA,WAAKD,OAAL,CAAae,IAAb,CAAkB,CAAC,GAAG,KAAKhB,KAAT,CAAlB;AACH,KAJD;AAKH;;AACDuB,EAAAA,UAAU,CAACf,EAAD,EAAK;AACX,SAAKT,IAAL,CAAUyB,MAAV,CAAkB,oCAAmChB,EAAG,EAAxD,EAA2DM,SAA3D,CAAqEQ,eAAe,IAAI;AACpF,YAAMG,UAAU,GAAG,KAAKzB,KAAL,CAAW0B,MAAX,CAAkBC,IAAI,IAAIA,IAAI,CAACnB,EAAL,KAAYA,EAAtC,CAAnB;AACA,WAAKR,KAAL,GAAayB,UAAb;AACA,WAAKxB,OAAL,CAAae,IAAb,CAAkB,CAAC,GAAG,KAAKhB,KAAT,CAAlB;AACH,KAJD;AAKH;;AA3CoB;;AA6CzBH,WAAW,CAAC+B,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAIjC,WAAV,EAAuBF,EAAE,CAACoC,QAAH,CAAYnC,EAAE,CAACoC,UAAf,CAAvB,CAAP;AAA4D,CAAjH;;AACAnC,WAAW,CAACoC,KAAZ,GAAoB,aAActC,EAAE,CAACuC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEtC,WAAT;AAAsBuC,EAAAA,OAAO,EAAEvC,WAAW,CAAC+B,IAA3C;AAAiDS,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import { Subject, map } from \"rxjs\";\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class PostService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.posts = [];\r\n        this.subject = new Subject();\r\n    }\r\n    getPosts() {\r\n        this.http.get(\"http://localhost:3000/posts\")\r\n            .pipe(map(postData => {\r\n            return postData.data.map((post) => {\r\n                return {\r\n                    id: post._id.toString(),\r\n                    name: post.name,\r\n                    description: post.description,\r\n                    content: post.content\r\n                };\r\n            });\r\n        }))\r\n            .subscribe(transformPosts => {\r\n            this.posts = transformPosts;\r\n            this.subject.next([...transformPosts]); // thông báo đến các event về một bản sao được cập nhật\r\n        });\r\n    }\r\n    async getOnePost(id) {\r\n        return this.http.get(`http://localhost:3000/posts/${id}`);\r\n    }\r\n    getUpdatePostListener() {\r\n        return this.subject.asObservable();\r\n    }\r\n    addPost(name, description, content) {\r\n        const value = { id: \"\", name, description, content };\r\n        this.http.post(\"http://localhost:3000/addPost\", value).subscribe(responseMessage => {\r\n            // this.posts.push(value)\r\n            this.getPosts();\r\n            this.subject.next([...this.posts]);\r\n        });\r\n    }\r\n    deletePost(id) {\r\n        this.http.delete(`http://localhost:3000/deletePost/${id}`).subscribe(responseMessage => {\r\n            const updatePost = this.posts.filter(item => item.id !== id);\r\n            this.posts = updatePost;\r\n            this.subject.next([...this.posts]);\r\n        });\r\n    }\r\n}\r\nPostService.ɵfac = function PostService_Factory(t) { return new (t || PostService)(i0.ɵɵinject(i1.HttpClient)); };\r\nPostService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PostService, factory: PostService.ɵfac, providedIn: \"root\" });\r\n"]},"metadata":{},"sourceType":"module"}